#if (SUBCORE != 1)  // SubCoreの指定
#error "Core selection is wrong!!"
#endif

#include <MP.h>
#include <vector>

using namespace std;
class Touch_Sensor
{
  private:
  //pin番号
    const uint8_t SRCLK = 2;
    const uint8_t RCLK = 3;
    const uint8_t G = 4;
    const uint8_t SER = 5;
    const uint8_t input_pin = 6;


  public:
    struct Touch_data
    {
        uint8_t note;
        vector<uint8_t> touch_number;
    };
  //初期設定
    void setup();
  //タッチセンサ処理
    void get_sensor(bool setup);
  //押されたタッチセンサ番号
    vector<uint8_t> touch_number;
};

void Touch_Sensor::setup() 
{
    pinMode(SRCLK, OUTPUT);//SRCLK
    pinMode(RCLK,  OUTPUT);//RCLK
    pinMode(SER,   OUTPUT);//SER
    pinMode(G,   OUTPUT);//G
    pinMode(input_pin, INPUT);//input_pin

    for(uint8_t j = 0; j < 10; j++)
        get_sensor(true);
    Serial.println("touch sensor set up completed !");
}

void Touch_Sensor::get_sensor(bool setup)
{
    //タッチセンサの数
    static int8_t touch_num = 88;
    static uint8_t touch_flag[88];
  //閾値
    static uint8_t touch_threshold[88] = {0};
  //タッチセンサの初期化
    for(uint8_t i = 0; i < touch_num; i++)
        touch_flag[i] = 0;
    touch_number.clear();

    delayMicroseconds(150);
    // 入力状態をHIGHにする
    digitalWrite(SER, HIGH);

    for (uint8_t i=0; i<touch_num; i++) {

        // 閾値決定のための変数
        uint8_t sub_threshold = 1;

        // シフトレジスタをシフトさせてSERピンの状態を記憶させる
        digitalWrite(SRCLK, LOW);
        delayMicroseconds(2);
        digitalWrite(SRCLK, HIGH);
        
        // シフトレジスタの状態をストレージレジスタへ反映させる
        digitalWrite(RCLK,  LOW);
        delayMicroseconds(2);
        digitalWrite(RCLK,  HIGH);

        //出力を有効にする
        digitalWrite(G, LOW);
        
        while(digitalRead(input_pin) != HIGH)
        {
            if (setup)
            {
                sub_threshold++;
            }
            else
            {
                touch_flag[i]++;
            }
        }
        if (setup)
        {
            //最大値を閾値とする
            if(sub_threshold > touch_threshold[i]){
                touch_threshold[i] = sub_threshold;
            }            
        }
        else
        {
            if(touch_flag[i] > touch_threshold[i])
            {
                touch_number.push_back(i); 
            }
        }

        delayMicroseconds(50);

        //出力を無効にする
        digitalWrite(G, HIGH);
        
        // 放電するまで待つ
        delayMicroseconds(200);

        // 以降の入力状態をLOWにする
        digitalWrite(SER, LOW);
    }
    // 閾値確認用
    // for(int j=0;j<88;j++){
    //   printf("%d,"touch_threshold[j]);
    // }
    // printf("\n");
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const uint16_t code_mode_size = 109;
const Touch_Sensor::Touch_data code_mode[109] = {
    {1, {}},
    {11, {0}},
    {12, {1}},
    {13, {2}},
    {14, {3}},
    {15, {4}},
    {16, {5}},
    {17, {2,4}},
    {18, {3,4}},
    {19, {4,5}},
    {21, {6}},
    {22, {7}},
    {23, {8}},
    {24, {9}},
    {25, {10}},
    {26, {11}},
    {27, {8,10}},
    {28, {9,10}},
    {29, {10,11}},
    {31, {12}},
    {32, {13}},
    {33, {14}},
    {34, {15}},
    {35, {16}},
    {36, {17}},
    {37, {14,16}},
    {38, {15,16}},
    {39, {16,17}},
    {41, {18}},
    {42, {19}},
    {43, {20}},
    {44, {21}},
    {45, {22}},
    {46, {23}},
    {47, {20,22}},
    {48, {21,22}},
    {49, {22,23}},
    {51, {24}},
    {52, {25}},
    {53, {26}},
    {54, {27}},
    {55, {28}},
    {56, {29}},
    {57, {26,28}},
    {58, {27,28}},
    {59, {28,29}},
    {61, {30}},
    {62, {31}},
    {63, {32}},
    {64, {33}},
    {65, {34}},
    {66, {35}},
    {67, {32,34}},
    {68, {33,34}},
    {69, {34,35}},
    {71, {36}},
    {72, {37}},
    {73, {38}},
    {74, {39}},
    {75, {40}},
    {76, {41}},
    {77, {38,40}},
    {78, {39,40}},
    {79, {40,41}},
    {81, {42}},
    {82, {43}},
    {83, {44}},
    {84, {45}},
    {85, {46}},
    {86, {47}},
    {87, {44,46}},
    {88, {45,46}},
    {89, {46,47}},
    {91, {48}},
    {92, {49}},
    {93, {50}},
    {94, {51}},
    {95, {52}},
    {96, {53}},
    {97, {50,52}},
    {98, {51,52}},
    {99, {52,53}},
    {101, {54}},
    {102, {55}},
    {103, {56}},
    {104, {57}},
    {105, {58}},
    {106, {59}},
    {107, {56,58}},
    {108, {57,58}},
    {109, {58,59}},
    {111, {60}},
    {112, {61}},
    {113, {62}},
    {114, {63}},
    {115, {64}},
    {116, {65}},
    {117, {62,64}},
    {118, {63,64}},
    {119, {64,65}},
    {121, {66}},
    {122, {67}},
    {123, {68}},
    {124, {69}},
    {125, {70}},
    {126, {71}},
    {127, {68,70}},
    {128, {69,70}},
    {129, {70,71}}
};
/////////////////////////////
const uint16_t manual_mode_size = 225;
const Touch_Sensor::Touch_data manual_mode[225] = {
    {1, {}},
    {11, {3,4,8,13}},
    {11, {42,51,52,56}},
    {12, {13,20,22,27}},
    {12, {40,42,45}},
    {13, {4,8,13}},
    {13, {13,14,15,16,17,26,27,28}},
    {14, {2,4,13}},
    {14, {13,14,15,16,17,22,26,27}},
    {14, {42,43,44,45,46,47,55,56}},
    {15, {4,8,13,15}},
    {15, {13,14,15,16,17,26,28}},
    {16, {4,5,13,14}},
    {16, {13,14,15,16,17,26,27}},
    {17, {8,13}},
    {17, {42,46,50,51}},
    {18, {13,14,15,16,17,22,26}},
    {18, {42,43,44,45,46,47,55}},
    {19, {13,14,15,16,17,26,34}},
    {19, {42,43,44,45,46,47,55,57}},
    {21, {9,10,14,19}},
    {21, {53,57,58,62}},
    {22, {19,26,28,33}},
    {22, {46,48,51}},
    {23, {19,20,21,22,23,32,33,34}},
    {23, {48,49,50,51,52,53,57,61,62}},
    {24, {19,20,21,22,23,28,32,33}},
    {24, {48,49,50,51,52,53,61,62}},
    {25, {19,20,21,22,23,32,34}},
    {25, {48,49,50,51,52,53,57,61}},
    {26, {19,20,21,22,23,32,33,40}},
    {26, {48,49,50,51,52,53,61,62,63}},
    {27, {19,20,21,22,23,27,32,34}},
    {27, {48,52,56,57}},
    {28, {3,8,19}},
    {28, {19,20,21,22,23,28,32}},
    {28, {48,49,50,51,52,53,61}},
    {29, {19,20,21,22,23,32,40}},
    {29, {48,49,50,51,52,53,61,63}},
    {31, {11,15,16}},
    {31, {54,63,64,68}},
    {32, {3,5}},
    {32, {25,32,34,39}},
    {33, {9,11,16}},
    {33, {25,29,38,39,40}},
    {34, {5,9,16}},
    {34, {25,26,27,28,29,34,38,39}},
    {35, {4,9,11}},
    {35, {25,26,27,28,29,38,40}},
    {36, {9,16,17}},
    {36, {25,26,27,28,29,38,39}},
    {37, {9,10,11}},
    {37, {25,26,27,28,29,33,38,40}},
    {38, {4,5,9}},
    {38, {25,26,27,28,29,34,38}},
    {39, {4,9,17}},
    {39, {25,26,27,28,29,38}},
    {41, {2,17}},
    {41, {21,22,26,31}},
    {41, {65,69,70,74}},
    {42, {31,38,40,45}},
    {42, {58,60,63}},
    {43, {15,17,22,26,31}},
    {43, {31,32,33,34,35,44,45,46}},
    {44, {31,32,33,34,35,40,44,45}},
    {44, {60,61,62,63,64,65,73,74}},
    {45, {31,32,33,34,35,44,46}},
    {45, {60,61,62,63,64,65,69,73}},
    {46, {31,32,33,34,35,44,45,52}},
    {46, {60,61,62,63,64,65,73,74,75}},
    {47, {31,32,33,34,35,39,44,46}},
    {47, {60,64,68,69}},
    {48, {31,32,33,34,35,40,44}},
    {48, {60,62,63,64}},
    {49, {31,32,33,34,35,44,52}},
    {49, {60,61,62,63,64,65,73,75}},
    {51, {3,4,8,13}},
    {51, {37,47,51,52}},
    {52, {8,15,17}},
    {52, {37,44,46,51}},
    {53, {3,7,8}},
    {53, {37,38,39,40,41,50,51,52}},
    {54, {7,8}},
    {54, {37,38,39,40,41,46,50,51}},
    {55, {3,7}},
    {55, {37,38,39,40,41,50,52}},
    {56, {7,8,9}},
    {56, {37,38,39,40,41,50,51}},
    {57, {2,3,7}},
    {57, {37,38,39,40,41,45,50,52}},
    {58, {7}},
    {58, {26,27,28,37,39}},
    {59, {7,9}},
    {59, {37,38,39,40,41,50}},
    {61, {0,9,10,14}},
    {61, {33,34,38,43}},
    {62, {3,5,14}},
    {62, {43,50,52,57}},
    {63, {0,1,2,3,4,5,9,13,14}},
    {63, {43,44,45,46,47,56,57,58}},
    {64, {0,1,2,3,4,5,13,14}},
    {64, {43,44,45,46,47,52,56,57}},
    {65, {0,1,2,3,4,5,9,19}},
    {65, {43,44,45,46,47,56,58}},
    {66, {0,1,2,3,4,5,13,14,15}},
    {66, {43,44,45,46,47,56,57}},
    {67, {0,4,8,9}},
    {67, {43,44,45,46,47,51,56,58}},
    {68, {0,1,2,3,4,5,13}},
    {68, {32,33,34,43,45}},
    {69, {0,1,2,3,4,5,13,15}},
    {69, {43,44,45,46,47,56}},
    {71, {11,15,16,20}},
    {71, {39,40,44,49}},
    {72, {4,6,9}},
    {72, {49,56,58,63}},
    {73, {6,7,8,9,10,11,15,19,20}},
    {73, {49,50,51,52,53,62,63,64}},
    {74, {6,7,8,9,10,11,19,20}},
    {74, {49,50,51,52,53,58,62,63}},
    {75, {10,15,20}},
    {75, {6,7,8,9,10,11,15,19}},
    {75, {49,50,51,52,53,62,64}},
    {76, {6,7,8,9,10,11,19,20,21}},
    {76, {49,50,51,52,53,62,63}},
    {77, {6,10,14,15}},
    {77, {49,50,51,52,53,57,62,64}},
    {78, {6,7,8,9,10,11,19}},
    {78, {49,50,51,52,53,58,62}},
    {79, {6,7,8,9,10,11,19,21}},
    {79, {49,50,51,52,53,62}},
    {81, {2,7,12,17}},
    {81, {12,21,22,26}},
    {82, {10,12,15}},
    {82, {55,62,64,69}},
    {83, {7,12,17}},
    {83, {12,13,14,15,16,17,21,25,26}},
    {84, {1,12}},
    {84, {12,13,14,15,16,17,25,26}},
    {84, {55,56,57,58,59,64,68,69}},
    {85, {5,7,12}},
    {85, {12,13,14,15,16,17,21,25}},
    {86, {4,12,13,17}},
    {86, {12,13,14,15,16,17,25,26,27}},
    {87, {7,11,12}},
    {87, {12,13,14,15,16,17,20,21,25}},
    {88, {12,13,14,15,16,17,25}},
    {88, {44,45,46,55,57}},
    {89, {4,5,12,13}},
    {89, {12,13,14,15,16,17,25,25}},
    {91, {23,27,28,32}},
    {91, {51,52,56,61}},
    {92, {16,18,21}},
    {92, {61,68,70,75}},
    {93, {18,19,20,21,22,23,27,31,32}},
    {93, {61,62,63,64,65,74,75,76}},
    {94, {18,19,20,21,22,23,31,33}},
    {94, {61,62,63,64,65,70,74,75}},
    {95, {18,19,20,21,22,23,27,31}},
    {95, {61,62,63,64,65,74,76}},
    {96, {18,19,20,21,22,23,31,32,33}},
    {96, {61,62,63,64,65,74,75}},
    {97, {18,22,26,27}},
    {97, {61,62,63,64,65,69,74,76}},
    {98, {18,19,20,21,22,23,31}},
    {98, {61,62,63,64,65,70,74}},
    {99, {18,19,20,21,22,23,31,33}},
    {99, {61,62,63,64,65,74}},
    {101, {5,9,10,14}},
    {101, {24,33,34,38}},
    {102, {2,4,9}},
    {102, {22,24,27}},
    {103, {8,9,10}},
    {103, {24,25,26,27,28,29,33,37,38}},
    {104, {4,8,9}},
    {104, {24,25,26,27,28,29,37,38}},
    {105, {8,10}},
    {105, {24,25,26,27,28,29,33,37}},
    {106, {8,9,16}},
    {106, {24,25,26,27,28,29,37,38,39}},
    {107, {3,8,10}},
    {107, {24,28,32,34}},
    {108, {4,8}},
    {108, {24,25,26,27,28,29,37}},
    {109, {8,16}},
    {109, {24,26,28,29,37,39}},
    {111, {35,39,40,44}},
    {111, {63,64,68,73}},
    {112, {1,8,10,15}},
    {112, {28,30,33}},
    {113, {1,2,3,4,5,14,15,16}},
    {113, {30,31,32,33,34,35,39,43,44}},
    {114, {1,2,3,4,5,10,14,15}},
    {114, {30,31,32,33,34,35,43,44}},
    {115, {1,2,3,4,5,14,16}},
    {115, {30,31,32,33,34,35,39,43}},
    {116, {1,2,3,4,5,14,15,22}},
    {116, {30,31,32,33,34,35,43,44,45}},
    {117, {1,2,3,4,5,9,14,16}},
    {117, {30,34,38,39}},
    {118, {1,2,3,4,5,10,14}},
    {118, {30,31,32,33,34,35,43}},
    {119, {1,2,3,4,5,14,23}},
    {119, {30,31,32,33,34,35,43,45}},
    {121, {2,7,17}},
    {121, {36,45,46,50}},
    {122, {7,14,16,21}},
    {122, {34,36,39}},
    {123, {7,8,9,10,11,20,21,22}},
    {123, {36,40,41,45,49,50}},
    {124, {7,8,9,10,11,16,20,21}},
    {124, {36,37,38,39,40,41,49,50}},
    {125, {2,7,9,11}},
    {125, {7,8,9,10,11,20,22}},
    {125, {36,37,38,39,40,41,45,49}},
    {126, {7,8,11}},
    {126, {7,8,9,10,11,20,21,28}},
    {126, {36,37,38,39,40,41,49,50,51}},
    {127, {7,8,9,10,11,15,20,22}},
    {127, {36,40,44,45}},
    {128, {7,9,11}},
    {128, {7,8,9,10,11,16,20}},
    {129, {7,8,9,11}},
    {129, {7,8,9,10,11,20,28}},
    {129, {36,37,38,39,40,41,49,51}}
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Touch_Sensor touch_sensor;
#define Swich_11 (11)
int8_t   ret1;
void setup() 
{
    // シリアル通信設定
    Serial.begin(2000000);
    while (!Serial);
    touch_sensor.setup();
    pinMode(Swich_11, INPUT);

    // マルチコア起動
    ret1 = MP.begin();
    MP.RecvTimeout(MP_RECV_POLLING);   
    //　起動エラー
    // if (ret1 < 0) 
    //     printf("SubCore start error = %d\n", ret1);
}

void loop()
{
    uint16_t note = 10000;
    //タッチセンサの値を取得
    touch_sensor.get_sensor(false);
//    printf("touch_number:");
//    for(uint8_t i=0;i<touch_sensor.touch_number.size();i++)
//    {
//        printf("%d,",touch_sensor.touch_number[i]);
//    }
//    printf("\n");
    
    //対応した音の番号の出力
    bool Code_mode = digitalRead(Swich_11);
    if(Code_mode)
    {
        for(uint8_t i=0;i<code_mode_size;i++)
        {
            if(touch_sensor.touch_number.size() == code_mode[i].touch_number.size() && 
            equal(touch_sensor.touch_number.cbegin(),touch_sensor.touch_number.cend(),code_mode[i].touch_number.cbegin()))
            {
                note = code_mode[i].note;
                break;
            }
            
        }
    }
    else
    {
        for(uint8_t i=0;i<manual_mode_size;i++)
        {
            if(touch_sensor.touch_number.size() == manual_mode[i].touch_number.size() && 
            equal(touch_sensor.touch_number.cbegin(),touch_sensor.touch_number.cend(),manual_mode[i].touch_number.cbegin()))
            {
                note = manual_mode[i].note;
                break;
            }
        }
    }
    int8_t msgid;
    uint32_t msgdata;
    /* Echo back */
    ret1 = MP.Recv(&msgid, &msgdata);  // MainCoreからmsg受信
    if (ret1 < 0) {
        //printf("SubCore1 fail connect Main = %d\n", ret1);
    }
    else
    {
        msgdata = note;
        ret1 = MP.Send(msgid, msgdata);  
         //msg送信エラー
         if (ret1 < 0) 
            printf("SubCore 1 send error = %d\n", ret1);
         else
            printf("SubCore1 send: id=%d data=%d\n", msgid, msgdata);
    }
    return;
}
